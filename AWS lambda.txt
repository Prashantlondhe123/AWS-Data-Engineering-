# AWS Lambda : 
-Run code without thinking about servers or clusters
-Run code without provisioning or managing infrastructure. Simply write and upload code as a .zip file or containe
-Automatically respond to code execution requests at any scale, from a dozen events per day to hundreds of thousands per second.
-Save costs by paying only for the compute time you use—by per-millisecond—instead of provisioning infrastructure upfront for peak capacity
-Optimize code execution time and performance with the right function memory size. Respond to high demand in double-digit milliseconds with Provisioned Concurrency
-AWS Lambda is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. You can trigger Lambda from over 200 AWS services and software as a service (SaaS) applications, and only pay for what you use
-


# Language support :
-Python
-node.js
-java
-C#
-Ruby

# Maximum execution durations -<15 min
#memory allocation 128mb-3008mb

#Use cases:
-Process data at scale
-Run interactive web and mobile backends
-Enable powerful ML insights
-Create event-driven applications
-

#Step:- search lambda function in the aws search bar 
-click on create function 
1)Auto from scratch 
2)Use blueprint 
3) container image
4) Brouse Serverless app repository

#Trigger : A trigger is a resource you configure to allow another AWS service to invoke your function when certain events or conditions occur

#Add destination : 
Lambda Destinations allow you to specify what to do if an asynchronous invocation succeeds or fails. 


#Throttle : At the highest level, throttling just means that Lambda will intentionally reject one of your requests and so what we see from the user side

#layer :A Lambda layer is a . zip file archive that can contain additional code or other content. A layer can contain libraries, a custom runtime, data, or configuration files

#Alias : Alias resource creates an alias for a Lambda function version

#Version: You can use versions to manage the deployment of your functions. For example, you can publish a new version of a function for beta testing without affecting users of the stable production version. Lambda creates a new version of your function each time that you publish the function.

# Asynchronous invocation in lambda function :For asynchronous invocation, Lambda places the event in a queue and returns a success response without additional information. A separate process reads events from the queue and sends them to your function. To invoke a function asynchronously, set the invocation type parameter to Event .

# Stream invocation in aws lmbda : 
Stream processing function invocations

shard is a uniquely identified sequence f data records. Your function is then invoked to process records from the batch “in order.” If an error is returned, Lambda retries the batch until processing succeeds or the data expires


#



